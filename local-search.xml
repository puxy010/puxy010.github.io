<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ch1ps🍟の年度总结</title>
    <link href="/2025/01/04/Ch1ps%E3%81%AE%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <url>/2025/01/04/Ch1ps%E3%81%AE%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch1psの年度总结"><a href="#Ch1psの年度总结" class="headerlink" title="Ch1psの年度总结"></a>Ch1psの年度总结</h1><p>当岁月的车轮缓缓驶过2024年的终点线，回首望去，那延伸至年初的道路仿佛一幅徐徐展开的长卷，每一程都写满了故事，每一步都镌刻着回忆。在这个转瞬即逝却又似乎漫长无比的一年里，我们经历了四季的更迭，见证了无数个日出日落，也一同走过了那些或欢笑、或沉思、或挑战、或成长的日子。现在，就让我们一同细数这一年里的点滴，将那些珍贵的瞬间编织成一篇属于Ch1ps的年度记忆。</p><p>这一年风起云涌，AI已不可阻挡得势头席卷科技领域；川普再次当选美国总统，中东地区依旧战乱频繁，我国六代机首飞成功等等</p><p>常道穷则独善其身，达则兼济天下，无论你是奔波在路上的背包客，还是坐在高楼里的公司白领，抑或是外卖小哥，为了生活而奔波的人呐，这一年，辛苦了。</p><h2 id="流水的CTF，铁打的皮蛋"><a href="#流水的CTF，铁打的皮蛋" class="headerlink" title="流水的CTF，铁打的皮蛋"></a>流水的CTF，铁打的皮蛋</h2><p>今年突出一个忙，忙忙忙。各大比赛一个没落下，也成功举办了第二届黄河流域网络安全技能挑战赛。</p><p>我们的足迹踏过了杭州，太原，贵阳，福州，北京，合肥，南京，郑州，曲阜等等，CTF数十场，卷卷有爷名（笑）。但是这几场比赛，出了西湖和强网以及国赛，别的比赛的茶歇区统统差评（恼。</p><p><img src="/images/image-20241225093228363.png" alt="image-20241225093228363"></p><p>光是下半年的比赛牌牌就攒了一大堆</p><p><img src="/images/image-20241225093256477.png" alt="image-20241225093256477"></p><p>也取得了相当不错的成绩</p><p><img src="/images/image-20241225093826528.png" alt="image-20241225093826528"></p><p>SDPC流氓混迹各大赛场（bushi</p><p>取证方面，算是兑现了去年的承诺，拿到了美亚一等奖。</p><p>今年的遗憾就是半决赛国赛两个miscer打了个三等奖，长城杯决赛，因为有些傻逼py队导致与二等奖失之交臂（已黑化），这些遗憾留在2025年实现吧。</p><hr><p>对于我们这种警校的学生来说，我们尝尝嘲笑自己是二流网安人，如果没有tz，没有ts岗，我们这群b人就啥也不是了（虽然现在在学校也啥也不是），未来的工作和网安很可能没有任何联系，再加上学校本身的学风不正（搞网安，搞技术却像个异类一样，某些老师眼红这些奖项，学生的学习远远不如制度重要，为了保住乌纱帽层层加码（不多说了懂得都懂）。总是给我一种夜郎自大的感觉。氦，我尝尝安慰自己-既来之则安之。某些人ban不动他为啥还要和他们置气，要是真的撕破脸吃亏的还是自己。</p><p>这种情况归根到达还是没有把学生的学习生活放在第一位，学校的某些人，某些高层并没有把学校当成学校，而是潜意识的认为这里是‘单位’，总想着“学生毕业就有工作，学习哪有学联考重要”，于是就导致了，落实j务化工作，学管工作占据了学校工作的核心地位。教学工作就靠边站啦。</p><p>当然上面的话全都是我朋友说的，和我没有一点关系😓（保命盾牌+++++++）</p><hr><h2 id="一些生活の流水账"><a href="#一些生活の流水账" class="headerlink" title="一些生活の流水账"></a>一些生活の流水账</h2><p>2024年年初去了趟武汉，也是我第一次一人的旅行，也算是给自己放个假，相对于我生活了19年的小县城来说，武汉的繁华之中又不失烟火气的氛围使我向往</p><p><img src="/images/image-20250104202123474.png" alt="image-20250104202123474"></p><p>三月份，乘着打西湖论剑之风，逛了一遭杭州</p><p><img src="/images/image-20250104202135760.png" alt="image-20250104202135760"></p><p>****<img src="/images/image-20241231233742885.png" alt="image-20241231233742885"></p><p>一个拥有西湖也仅限于西湖的城市<br>四月份去天津打长城杯半决赛，来到天津卫，如第二故乡般，在我的家乡，作为90年代的新建县城，人们为了讨生活很多都去天津做生意，跑金融器材。慢慢的塘沽（现在叫滨海新区）就成了庆云人的根据地。小时候和姥爷去天津港装货，去机场接客户之类的。如今老人家马上就75了，天津城建在10年间也变化非凡，老爷子还是和10年前般的干劲十足，时常问他什么时候“退休”，他却说“干着玩”。是这样的，我们总是靠某种执念生活着。<br>5月份去了西安和福州，说起来也怪，在福州吃了这么多美味，让我印象最深刻的是他们卤味的蘸料。加了当地福建老酒的蘸料，就像爱情一样，入口是热烈的，而滑入咽喉，咸鲜<br>才慢慢散开，层次分明。</p><p><img src="/images/image-20241231234933688.png" alt="image-20241231234933688"></p><p>像是那么回事哎👆</p><p>六月份赶在实习之前抓紧和团队的师傅们拍了一张合照，能聚起这么多人真的不容易</p><p><img src="/images/image-20250104202339572.png" alt="image-20250104202339572"></p><p>六月份—九月份被拉去青州ga实习，跟着师傅学习了很多东西，慢慢把学的技术与实战接轨。忙里偷闲的出去讲了次课，打了三次比赛。</p><p><img src="/images/image-20250104200430331.png" alt="image-20250104200430331"></p><p><img src="/images/image-20250104200442759.png" alt="image-20250104200442759"></p><p>emm国赛打的很不好，两个misc手打了39，要是早点发现他的break和fix是一套环境还有望进一进决赛。。算是一个遗憾吧</p><p><img src="/images/image-20250104200451544.png" alt="image-20250104200451544"></p><p>有幸和nepnep的师傅们一起聚个餐，感谢贝塔姐姐的宴请hhhh</p><p><img src="/images/image-20250104202013163.png" alt="image-20250104202013163"></p><p>十月份，心心念念得省赛终于来了，那次比赛可谓是各方压力云集，真是把我快压得喘不过气来了，好在结果是好的，拿到了省赛的特等奖</p><p><img src="/images/image-20241231234926821.png" alt="image-20241231234926821"></p><p>当然还有贵阳的网鼎杯，算是我目前位置去过的最远的城市了(PS:我是真的吃不惯贵阳的酸汤火锅，不过酸汤鱼还可以捏😋)</p><p><img src="/images/image-20241231235344705.png" alt="image-20241231235344705"></p><p>在黔灵山看了小破猴子</p><p><img src="/images/image-20250104200306309.png" alt="image-20250104200306309"></p><p>十一月是郑州，终于还是如愿以偿的打了，不过这次去郑州的最最最重要的任务并不是强网杯，那肯定是云house啦啦啦</p><p><img src="/images/image-20241231235430499.png" alt="image-20241231235430499"></p><p>12月是北京，ISCC依旧不出所料的烂，只拿到了二等奖。</p><h2 id="一些感情"><a href="#一些感情" class="headerlink" title="一些感情"></a>一些感情</h2><p>我不知道该怎么形容我现在的状态，不知道在20岁的年纪考虑那么多是否是对的。很久之前看到过一句话：我在遏制内心疯狂生长的爱意。听上去确实像一个感情羸弱的矫情男哈哈，也许我只是自己骗自己，也许只是想要被需要的感觉。不想给别人带了不必要的麻烦，找不到答案，或许最好的解答就是交给时间吧。</p><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q：关于容貌焦虑<br>A：woc，容我吐槽一下，为什么哥们打ctf越大越苍老啊啊啊啊啊啊</p><p>Q：关于退役<br>A：大概有比赛打比赛，没有比赛就学习公考了，等到打完长城杯决赛就彻底退役啦</p><p>Q：关于岗位<br>A：目前最想去的岗位是青岛，不是很想回家，并不是说家乡不好，毕竟是生我养我的地方，但是就个人发展和生活上，还是青岛更让我向往一些</p><p>Q：有喜欢的人吗（小声）<br>A：目前来说。。确实是有的</p><p>Q：如何看到某些ctf娱乐圈的人<br>A：emmm，带坏新生，某些人光tnn的水群，不专心搞技术，某些娱乐圈的人，在群里发个消息就一堆人跟风吹捧，看似很牛逼，真面试他的时候啥也不会，懂得都懂。</p><p>Q：这一年你学了什么东西</p><p>A：搞明白了应急响应，总结出了一套应急响应骚操作，学了一点渗透、misc&amp;web一如既往、因为省赛学了一点re、还有取证巴拉巴拉</p><h2 id="落笔处"><a href="#落笔处" class="headerlink" title="落笔处"></a>落笔处</h2><p>新的一年，给自己设立几个小目标</p><ul><li>国考省考联考考个好成绩</li><li>打好剩下的几个比赛</li><li>学会打羽毛球</li><li>学会滑雪</li><li>学出驾照（之前因为各种事情耽误了）</li><li>出国旅游</li></ul><p>将来会是什么样子的，我觉得我们应该有所憧憬。好像我们的将来都是在弥补上一年的遗憾。</p><p>再将来的2025年，想要做的事情太多了，想拿更多的奖，想去很多地方，想认识更多优秀的人，想真正享受一次属于自己的旅行。但那又如何，也许生活会继续索然无味，也许学业事业上继续毫无进展。</p><p>也许正是由于未来的不确定性，生活充满生机。</p><p>2024动荡不定，祝愿2025年，大家平平安安，一切安好。祝愿人间美好，世界和平。</p><p>可能会是一无是处，可能操蛋的生活得到一些转机，可能还是一穷二白。世界残酷，但并非一定丑陋</p><p>新的一年，Ch1ps也祝师傅们，新年快乐，愿你能发现生活中的小happy，愿你能享受生活中的小幸福，愿你永远开心。</p><p>愿你可以被温柔对待，愿你可以看到繁星灿烂，愿你可以欣赏山河壮丽。</p><p>祝你忘记琐事，祝你永远快乐。</p><p>文末来点趣味小活动hhh</p><p><img src="/images/image-20250104202631393.png" alt="image-20250104202631393"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ch1ps🍟の初食记-Linux内核内存取证</title>
    <link href="/2024/08/01/%E5%88%9D%E9%A3%9F%E7%94%A8Linux%E5%86%85%E6%A0%B8%E5%8F%96%E8%AF%81-assets/"/>
    <url>/2024/08/01/%E5%88%9D%E9%A3%9F%E7%94%A8Linux%E5%86%85%E6%A0%B8%E5%8F%96%E8%AF%81-assets/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从一个题目入手，那就是SEKAI的一道forensics，这个题目使用<strong>LiME</strong>对内核为<strong>5.15.0-43-generic</strong>的<strong>Ubuntu</strong>制作内存镜像, 需要自行制作<strong>Symbols 进行分析</strong>，这个题目的答题思路就是我们要找出内存的对应的linux 的内核版本，通过内核版本找出内存来着那个版本的Linux，然后制作相应的Symbols（vol3），然后就可以镜像常见的操作了</p><p>这里附件上传我的云盘力：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">链接：https:<span class="hljs-comment">//pan.baidu.com/s/1bNCXioU31a9-rAXdVN8M4A </span><br>提取码：dddk <br>--来自百度网盘超级会员<span class="hljs-built_in">V2</span>的分享<br></code></pre></td></tr></table></figure><p><img src="/images/e487f75d-75c0-43b8-8c65-ee74399dcbb2.png" alt="Untit1111led.png"></p><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>这里我们先来稍微解释一下一些简单的概念的问题，方便我们理解。</p><h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><p>Profile是特定操作系统版本以及硬件体系结构（x86、x64、ARM）中<code>VTypes</code>、共用体、对象类型的集合。</p><blockquote><p>Vtypes 是 Volatility 框架中数据结构定义以及解析的语言，大部分操作系统底层都是使用 C 语言编写的，其中大量使用数据结构来组织和管理相关的变量以及属性。</p><p>因为 Volatility 是用 Python 语言编写的，所以我们需要一种方式在Python 源文件中表示 C 语言的数据结构。</p><p>VTypes 正是用于实现这一点的。</p></blockquote><p>除了这些组件以外，<code>Profile</code> 还包括如下:</p><ul><li>元数据：操作系统的名称(例如:“windows”,“mac”,“linux”)，内核版本，以及编译号。</li><li>系统调用信息：索引以及系统调用的名称。</li><li>常量值：全局变量-在某些操作系统中能够在硬编码的地址处找到的全局变量</li><li>系统映射：关键全局变量和函数的地址（仅限 Linux 和 Mac）</li></ul><p>但在 Volatility3 中，不再使用配置文件<code>Profile</code>，取而代之，vol3自身带有一个扩展的符号表库<code>Symbols</code>，并且对于大多数Windows内存镜像，可以基于内存映像本身来生成新的符号表。它允许符号表包含基于该操作系统位置（符号位置）的特定偏移量。</p><p>也就是说利用官方调试信息提供的那些结构的已知偏移量，可以更轻松、更快速地识别操作系统中的结构。</p><h2 id="Symbol-Tables"><a href="#Symbol-Tables" class="headerlink" title="Symbol Tables"></a>Symbol Tables</h2><p>用于分析相关操作系统数据的内核符号表压缩包，其所有文件以JSON数据格式存储，可以是纯json文件<code>.json</code>，也可以是<code>.json.gz</code>或者<code>.json.xz</code>，Volatility3在使用它们时会自动解压。此外，Vol3会在用户主目录下的<code>.cache/volatility3</code>目录下会缓存他们的压缩内容，当前还无法更改这个缓存目录。</p><p>Vol3的symbol tables分为两类，上面的<code>Windows Symbol tables</code>作为一类，由于对Mac和Linux采用相同的识别机制，统分为另外一类。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>对于WIndows系统，符号表字符串由所需<code>PDB</code>文件的<code>GUID</code>和<code>Age</code>组成，Volatility会搜索windows子目录下配置的所有文件，并与包含<code>pdb</code>名称，<code>GUID</code>&#x2F;<code>Age</code>（或者其他压缩形式）的所有元数据进行匹配、利用。如果找不到的话，会从 Microsoft 官方的符号表服务器下载相关的<code>PDB</code>文件，并自动转化成适当的<code>JSON</code>格式，并存储在合适的位置。</p><p>可以从适当的 PDB 文件手动构建 Windows 符号表，而执行此操作的主要工具已经内置在 Volatility3了：<code>pdbconv.py</code>。 该文件支持从<code>Volatility3</code>的根路径运行，命令如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">┌──(kali㉿kali)-[~]<br>└─$ python3 .<span class="hljs-regexp">/volatility3/</span>framework<span class="hljs-regexp">/symbols/</span>windows/pdbconv.py<br></code></pre></td></tr></table></figure><p>Volatility官方也已经给出了Windows符号表：<a href="https://downloads.volatilityfoundation.org/volatility3/symbols/windows.zip">Volatility3官方：Windows符号表下载</a></p><h3 id="Linux-Mac"><a href="#Linux-Mac" class="headerlink" title="Linux&#x2F;Mac"></a>Linux&#x2F;Mac</h3><p><a href="https://downloads.volatilityfoundation.org/volatility3/symbols/mac.zip">Volatility3官方：Mac符号表下载</a></p><p>对于 Mac，它只有特定数量的内核，但我们不会经常更新包，因为它有点耗时。</p><p><a href="https://downloads.volatilityfoundation.org/volatility3/symbols/linux.zip">Volitility3官方：Linux符号表（不全）</a></p><p><a href="https://github.com/volatilityfoundation/dwarf2json">dwarf2json</a> 可以从 <code>DWARF</code>文件生成 Linux 和 Mac 符号表。而当前，利用内核中包含的调试符号表，是大多数Volatility3插件恢复信息的唯一合适方法。</p><p>值得注意的是，只有<code>-- elf</code>的方案在 vol3 中可行,其他使用如<code>Sysmap</code> 解析出来的 json 都是不可行的。(在vol2中生成profile会用到 Sysmap )</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/dwarf2json linux --elf /u</span>sr<span class="hljs-regexp">/lib/</span>debug<span class="hljs-regexp">/boot/</span>vmlinux-<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">137</span>-generic &gt; output.json<br></code></pre></td></tr></table></figure><p>此外，为什么上面说Linux符号表信息不全呢？因为Linux内核易于编译且唯一，无法区分它们，因此官方提供的Linux符号表并不详尽，因此在面对Linux内存取证时，要自行生成符号表；并且，标准内核是被剥离了调试信息的，若想获取带有调试信息的，则需从文件中单独获取。</p><p>下面是这几天找的制作符号表的一些奇技淫巧</p><h4 id="0x01-dwarf2json"><a href="#0x01-dwarf2json" class="headerlink" title="0x01-dwarf2json"></a>0x01-dwarf2json</h4><p>很常规，就是找到目标内存对应版本的内存镜像</p><p>第一步找到版本</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 vol<span class="hljs-selector-class">.py</span> -f <span class="hljs-string">&#x27;/root/桌面/dump.mem&#x27;</span>  banners<span class="hljs-selector-class">.Banners</span> <br></code></pre></td></tr></table></figure><p><img src="/images/image-20231130220515515.png" alt="image-20231130220515515"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">5</span>.<span class="hljs-number">15</span>.<span class="hljs-number">0</span>-<span class="hljs-number">43</span>.<span class="hljs-number">46</span>-generic <span class="hljs-number">5</span>.<span class="hljs-number">15</span>.<span class="hljs-number">39</span><br></code></pre></td></tr></table></figure><p>找到这个版本对应的内核镜像，ps这里的俺也不知道为啥为啥找不到源文件下载链接呜呜（哭</p><p>获取源文件网址：<a href="https://launchpad.net/ubuntu/+archive/primary/+files/">https://launchpad.net/ubuntu/+archive/primary/+files/</a> ，按需选择下载。</p><p>我们的目标文件是vmlinux5.4.0-84-generic，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Linux</span> 内核映像文件的名称，它包含了 Linux 操作系统内核的可执行代码。这个文件名中的各个部分的含义如下：<br><br><span class="hljs-attribute">vmlinux</span>: 这是 Linux 内核的可执行文件，包含了完整的符号信息，用于调试目的。它通常比实际用于引导的内核映像文件更大。<br><br><span class="hljs-attribute">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">84</span>-generic: 这部分指定了 Linux 内核的版本号。在这里，它表示 Linux 内核版本为 <span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>，而 -<span class="hljs-number">84</span>-generic 是特定于 Ubuntu 等发行版的标识，表示这是一个特定修订版本的内核。<br></code></pre></td></tr></table></figure><p><strong>借助Docker直接获取<code>dbgsym</code>文件安装在指定系统</strong></p><p>我们拿到了这个内核镜像文件，然后还需要再一个相应的linux版本的环境来使用我们的工具（dwarf2json相应的glibc版本来编译这符号表文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --<span class="hljs-built_in">rm</span> -v <span class="hljs-variable">$PWD</span>:/volatility ubuntu:18.04 /bin/bash<br><span class="hljs-built_in">cd</span> volatility/dwarf2json<br>dpkg -i linux-image-unsigned-5.4.0-84-generic-dbgsym_5.4.0-84.94_amd64.ddeb<br>(这里如果提示储存不够，那就可以dpkg -c xxx.dded看一下内核映像文件的位置和名称，然后dpkg -x .ddeb vmlinux5.4.0-84-generic,提取出单个文件)<br>./dwarf2json linux --elf /usr/lib/debug/boot/vmlinux5.4.0-84-generic &gt; linux-image-5.4.0-84-generic.json <br><span class="hljs-built_in">cp</span> linux-image-5.4.0-84-generic.json ./volatility3/volatility3/framework/symbols/linux<br></code></pre></td></tr></table></figure><h4 id="0x02-symbols-maker"><a href="#0x02-symbols-maker" class="headerlink" title="0x02 symbols_maker"></a>0x02 symbols_maker</h4><p><a href="https://github.com/kevthehermit/volatility_symbols">https://github.com/kevthehermit/volatility_symbols</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">py</span> symbol_maker.py -d ubuntu -k ‘<span class="hljs-number">5</span>.<span class="hljs-number">15</span>.<span class="hljs-number">0</span>-<span class="hljs-number">43</span>-generic’ <br></code></pre></td></tr></table></figure><p>越南那哥们可以跑成功，我这里不行捏。。。</p><h2 id="2022-Sekai-CTF-symbolic-needs-1"><a href="#2022-Sekai-CTF-symbolic-needs-1" class="headerlink" title="2022 Sekai CTF | symbolic-needs 1"></a>2022 Sekai CTF | symbolic-needs 1</h2><p>按照上面构造符号表的方法，先判断当前系统版本和Linux 内核版本，再制作符号表，这个题目很巧，给了Ubuntu 22.04 Linux-version 5.15.0-43-generic，当前版本，Vol2是不支持的，必须用Vol3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿SanDieg0)-[/mnt/d/volatility3]<br>└─$ wget https://launchpad.net/ubuntu/+archive/primary/+files/linux-image-unsigned-5.15.0-43-generic-dbgsym_5.15.0-43.46-generic_amd64.ddeb<br>┌──(root㉿SanDieg0)-[/mnt/d/volatility3]<br>└─$ <span class="hljs-built_in">cd</span> ../<br>┌──(root㉿SanDieg0)-[/mnt/d/volatility3]<br>└─$ docker run -it --<span class="hljs-built_in">rm</span> -v <span class="hljs-variable">$PWD</span>:/volatility ubuntu:22.04 /bin/bash<br>┌──(root㉿DockerID)-[/]<br>└─$ <span class="hljs-built_in">cd</span> volatility/dwarf2json<br>┌──(root㉿DockerID)-[/volatility3/dwarf2json]<br>└─$ dpkg -i linux-image-unsigned-5.15.0-43-generic-dbgsym_5.15.0-43.46_amd64.ddeb<br>┌──(root㉿DockerID)-[/volatility3/dwarf2json]<br>└─$ ./dwarf2json linux --elf /usr/lib/debug/boot/vmlinux-5.15.0-43-generic &gt; linux-image-5.15.0-43-generic.json <br><span class="hljs-comment">#退出Docker</span><br>┌──(root㉿SanDieg0)-[/mnt/d/volatility3/]<br>└─$ <span class="hljs-built_in">cp</span> linux-image-5.4.0-84-generic.json ./volatility3/volatility3/framework/symbols/linux<br>┌──(root㉿SanDieg0)-[/mnt/d/volatility3/]<br>└─$ python3 vol.py -f /mnt/f/20022Sekai/dump.mem linux.bash<br>Volatility 3 Framework 2.4.0<br>PID Process CommandTime Command<br><br>1863    bash    2022-08-29 13:45:56.000000    72.48.117.53.84.48.110.95.119.51.95.52.114.51.95.49.110.33.33.33<br></code></pre></td></tr></table></figure><p>其实难点就是这自己制作symbols，也就是win7内存forensics的profiles部分需要我们自己制作，其他的思路和win7的取证思路一样。</p><h2 id="相关ddeb快速查找"><a href="#相关ddeb快速查找" class="headerlink" title="相关ddeb快速查找"></a>相关ddeb快速查找</h2><p><a href="https://mirrors.ustc.edu.cn/debian/pool/main/l/linux/">https://mirrors.ustc.edu.cn/debian/pool/main/l/linux/</a></p><p><a href="https://mirrors.ustc.edu.cn/ubuntu/pool/main/l/linux/">https://mirrors.ustc.edu.cn/ubuntu/pool/main/l/linux/</a></p><p><a href="http://ftp.us.debian.org/debian/pool/main/l/linux/">http://ftp.us.debian.org/debian/pool/main/l/linux/</a></p><p><a href="http://ddebs.ubuntu.com/ubuntu/pool/main/l/linux/">http://ddebs.ubuntu.com/ubuntu/pool/main/l/linux/</a></p><p><a href="http://security.ubuntu.com/ubuntu/pool/main/l/linux/">http://security.ubuntu.com/ubuntu/pool/main/l/linux/</a></p><h2 id="vol2-profile制作"><a href="#vol2-profile制作" class="headerlink" title="vol2-profile制作"></a>vol2-profile制作</h2><p>首先我们找到内存镜像对应的虚拟机版本，这里我们那qwb的题目为实例</p><p>我们通过bananer一下得知内存镜像的内核版本信息，我们找到对应信息的ubuntu发现内核版本不是我们想要的</p><h3 id="虚拟机换内核"><a href="#虚拟机换内核" class="headerlink" title="虚拟机换内核"></a>虚拟机换内核</h3><p>记住几个指令就好，网上的一些方法亲测无效</p><p>安装对应版本的内核镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install linux-image-<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">153</span>-generic  <br></code></pre></td></tr></table></figure><p>安装对应版本的内核头文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install linux-headers-<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">153</span>-generic <br></code></pre></td></tr></table></figure><p>安装对应版本的内核模块</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install linux-modules-<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">153</span>-generic<br></code></pre></td></tr></table></figure><p>安装对应版本的驱动</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install linux-modules-extra-<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">153</span>-generic<br></code></pre></td></tr></table></figure><p>查看已经安装的内核版本</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dpkg <span class="hljs-punctuation">-</span>l <span class="hljs-string">|grep linux-image </span><br></code></pre></td></tr></table></figure><p>完事之后重启虚拟机，安装shift+tab键进入ubuntu高级选项，选择第二个选项（A什么什么的）</p><p>选择我们想要加载的内核版本，启动就换好了。</p><h3 id="制作profile"><a href="#制作profile" class="headerlink" title="制作profile"></a>制作profile</h3><h4 id="制作符号表"><a href="#制作符号表" class="headerlink" title="制作符号表"></a>制作符号表</h4><p>找到boot路径下的这个文件，System.map文件。该文件包含系统的符号信息</p><p><img src="/images/image-20231221145023234.png" alt="image-20231221145023234"></p><h4 id="创建vtypes"><a href="#创建vtypes" class="headerlink" title="创建vtypes"></a>创建vtypes</h4><p>vtypes是内核数据结构，为创建该数据结构，我们需要检查我们的源码并针对我们要分析的系统内核编译module.c文件，这将会为我们生成一个名为module.dwarf文件，该文件包含了我们所需的内核调试信息。<br>然后把vol2源码文件中的&#x2F;tool&#x2F;linux文件加复制到我们的目标虚拟机中<br>执行两条命令之后</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install dwarfdump <br>sudo apt-<span class="hljs-built_in">get</span> install build-essential <br></code></pre></td></tr></table></figure><p>然后make</p><p><img src="/images/image-20231221145147238.png" alt="image-20231221145147238"></p><p>可以得到一个.dwarf文件<br>a</p><hr><p>打包之后放到<code>volatility/plugins/overlays/linux</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> zip Ubuntu.zip ./tools/linux/module.dwarf /boot/System.map-`<span class="hljs-built_in">uname</span> -r`<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">--plugins</span>=profiles --<span class="hljs-built_in">info</span> | grep Linux<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> zip Ubuntu.zip module.dwarf /boot/System.map-`<span class="hljs-built_in">uname</span> -r`<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/31/hello-world/"/>
    <url>/2024/07/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
